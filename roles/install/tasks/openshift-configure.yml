- name: Generate Random ClusterName
  set_fact: 
    random_cluster_name: "{{ lookup('community.general.random_string', length=5, upper=false, special=false) }}"

- name: Debug Cluster Name
  ansible.builtin.debug:
    msg: "{{ random_cluster_name }}"
    verbosity: 0

- name: Create working directory if it does not exist
  file:
    path: "{{ work_dir }}/ssh_key"
    state: directory
    mode: '0755'

- name: Generate an OpenSSH keypair with a different algorithm (ed25519)
  community.crypto.openssh_keypair:
    path: "{{ work_dir }}/ssh_key/{{ random_cluster_name | default(cluster_name) }}"
    type: ed25519

- name: Read SSH generate
  slurp:
    src: "{{ work_dir }}/ssh_key/{{ random_cluster_name | default(cluster_name) }}.pub"
  register: slurped_user_data_sshkey

- name: Decode data and store as fact 
  set_fact:
    ssh_key: "{{ slurped_user_data_sshkey.content | b64decode }}"
  when: 
    - slurped_user_data_sshkey is defined

- name: Debug SSH key
  ansible.builtin.debug:
    msg: "{{ ssh_key }}"
    verbosity: 0

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ work_dir }}"
    state: directory
    mode: '0755'

- name: Download openshift clients
  ansible.builtin.unarchive:
    src: "{{ openshift_clients_url }}/{{ item }}"
    dest: "{{ work_dir }}"
    remote_src: yes
  loop:
    - "{{ client_linux }}"
    - "{{ install_linux }}"

- name: Download ISO COREOS
  ansible.builtin.get_url:
    url: "{{ iso_coreos }}"
    dest: "{{ work_dir }}/{{ random_cluster_name | default(cluster_name) }}-rhcos-live.x86_64.iso"

- name: Create working directory if it does not exist
  file:
    path: "{{ work_dir }}"
    state: directory
    mode: '0755'

- name: Create working directory if it does not exist
  file:
    path: "{{ work_dir }}/install_dir"
    state: directory
    mode: '0755'

- name: Verify if install-config already run
  stat:
    path: "{{ work_dir }}/install-config.yaml"
  register: install_config

- fail:
    msg: "{{ work_dir }} has already been initialized. Please delete it if you want to re-initialize."
  when: install_config.stat.exists

- name: configure install-config
  template:
    src: "{{ role_path }}/templates/install-config.yaml.j2"
    dest: "{{ work_dir }}/install-config.yaml.copy"
  when: install_config.stat.exists == false

- name: Copy install-config.yaml file
  copy:
    src: "{{ work_dir }}/install-config.yaml.copy"
    dest: "{{ work_dir }}/install_dir/install-config.yaml"
    remote_src: yes
  when: install_config.stat.exists == false

- name: Verify if Client exist already run
  stat:
    path: "{{ work_dir }}/openshift-install"
  register: exist_install_config

- name: Install Cluster Openshift {{ ocp_version }}
  shell:
    cmd: "{{ work_dir }}/openshift-install create single-node-ignition-config --dir={{ work_dir }}/install_dir"
    chdir: "{{ work_dir }}"
  when:
    - exist_install_config.stat.exists == true
  register: install_status

- name: Create RH COREOS
  shell:
    cmd: "{{ work_dir }}/openshift-install create single-node-ignition-config --dir={{ work_dir }}/install_dir"
    chdir: "{{ work_dir }}"
  when:
    - exist_install_config.stat.exists == true
  register: install_status

- name: Create RH COREOS ISO + ignition
  shell:
    cmd: "podman run --privileged --pull always --rm -v /dev:/dev -v /run/udev:/run/udev -v {{ work_dir }}:/data -w /data quay.io/coreos/coreos-installer:release iso ignition embed -fi install_dir/bootstrap-in-place-for-live-iso.ign {{ random_cluster_name | default(cluster_name) }}-rhcos-live.x86_64.iso "
    chdir: "{{ work_dir }}"
  when:
    - exist_install_config.stat.exists == true
  register: install_status




